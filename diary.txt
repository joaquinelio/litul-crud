
*** ----- ***
*** Diary ***   
*** ----- ***



190624  monday again

Debug is insane.  I hate js.
From a entirely working program, turned to scrap after multiple refactor.  It shouldnt be so difficult.
1 Real bug,  
1 big " ()=>{this.f()} " onclick headache from the new event delegation,  
7 from... SPELLING and stoped counting !!!  Easy to fix, hard to catch.
I AM THE NO-BUG GUY.  ONCE MY PROGRAMS COMPILE OK, THEY ARE ERROR FREE
I miss compilers and preprocesors. 
I hate js.
Would it be faster if I move to TS?
...
wtf inedxeddb bug? store not found?  I didnt touch it.  Never used on zorrafogosa, but specs are the same.
store...  bet updateneeded.  Later.
...
Refactor: (still broken)
* Event delegation.  
  It Wasnt the simplification paradise. Coudnt avoid crazy  ()=>{this.f()} they just moved
  I decided to leave the many onclick "hidden" small _bt methods, 
  otherwise switchcase would have been too big. Its ok, they are completely standalone. The bug is js cant hide them.
* Constructor, defined vars (ok, props) inside  (Why LET CONST not allowed? Who knows)
  forced by zorrafogosa.  GOOD! Structure is better.
* Big obj so store data from dev sets() instead of multiple _vars
  They usually match dom objects. Why not unified obj?  
  Cause I dont trust in such overstore.
  Some would be cleaner, like button labels, other more complex... leave them outside dom.
Broken, not working anymore.
Too much rewritting at once, and js sucks. 
Need to fix now.
I am very tempted to play with svg, but it would be childish.
I would like to test generators... They look important. and cool.  Another refactor.
But I need to JUMP TO NODE NOW



190622 after Breakfast

Why? 
I used a BIG data object, just data, to persist.
I could have used many small persistent objects instead, say... OOP.
I didn't even consider it.
Should I?
No.  It's ok, but I would have used that aproach if I were using them many times each.
In fact, they ARE objects inside .devStuff. but only hold data.  They are  strongly related to the DOM objects I cannot avoid.
Correct oop would have been extending DOM objects to hold my special properties: more encapsulation and  fewer temp variables.
But... I don't trust it enough.
Same reason I took of then many onclick from the dom via delegation...  
each button were holding its own onclick, but i dont use those anymore.
Resulted in not the clean code I expected but I 'll keep them outside.
Still, I feel... guilty. 
I already have padButtons{} and customButtons{}.  They hold the same DOM buttons.  Is this a well designed structure?



190622  

You may seem slow. 
No. You are the FireTurttle.
You dont pop up forms, buttons and icons and pretty message boxes every single moment from the start.
You trace and follow a longer path.
But when you finally reach the front door past the garden, ready along with your well trained partners,
you'll see your careless mates already there, 
still sitting and furiously cleaning the mud off their pants 
and broken flowers from their shoes. 
There is a better way, guys. Come on, I'll show you.
...
Ok, this is taking TOO long,  but just because it is still a LEARNING project being refactored over and over...
Hope this lead to a strong infrastructure for future projets.



190621 diying (spelling..?)

Insane refactor, all the changes at once.
Big devStuff object instead of the many let from dev set(),
allowed css classes object !!!????  nobody would understand why.  Im maniac.
delegation,
contructor reconstruction, from empty to all on me
and no way to test any of this until I finish them all.
...
Besides, delegation COULD have get rid of the many exposed onclick functions,
but it resulted in a insanely long onclick.  
So: the many exposed this._bt() stay,  clear and better code.  Exposed because JS fault, not mine. 
advantages remain:
just one lissening, (except custom buttons)
no onclick = ({()=>this._bt()}) trick, 
no server (I mean future, no server code yet) functions names exposed as onclick in the dom... it could have been shadow but...
I wanna sleep.



190621 after nap

Decitions.
More element good taste.
(javascript.info is getting better and better, I love it).
I could set 
functions via attributes (simil onclick) , then
connectedCallback to render
This would be a well designed custom element
But this element is too complex, 
I dont like letting html do so much behavior set
Far more clear and easy to read,
  crudpad.setUpdate(funFrmEdit, funDbUpdate)
inside js  (SERVER side, SECURITY matters.)
than lots of attr inside html.



190621  No dark anymore...  Morning?  I'll get some coffee.

Test code? I never used it,  still my programs were bug free.
I come from assembler:
You write the program, you compile it, 
you put it in a PROM.
"It doesn't move" says someone.
That's the error message.  
If you are lucky, the device has a led.  
Then you check the eprom, then print the program, 
maybe take it home to squizze your brain and figure out what's going on.
Thats the debug.
No magic numbers, no loose vars, no quoted parametrs, no standalone flags.  
Strong naming (types? whats that? Not invented yet... maybe a C programmer can tell...)  
Replace all of them and fill the preprocesor, 
so the compiler CAN FIX most of your mistakes.
And no handwriting PROM, RS232. 
When the code reaches the PROM, only conceptual errors remain.
I did the same in Wang Basic, dbase-Clipper, Access, VB6-SQLserver. 
VS intellisense actually can be VERY intelligent if you write good code,
better than any linter can be if you are not strict.
strong naming,  strong typing,
unique and easy to identify responsibles,
centralize responsabilities, 
start the structure before the functionality, 
and DO every tool you can help the COMPILER to understand your code.
"your code doesnt have bugs" a surprised boss told me.
It compiles. So no, never.  
Until now.  I hate js.



190621

DOM
I'm tempted to do the same (big object with subcategories) with the dom.
Create all elements at start, make them visible later if implemented.
Much, much clear...
Wouldnt be neither bug fixing nor learning nor performance tuning.
Just easier to read.
I should learn other options first, It seems I'm missing important stuff 
regarding htm construction.  Templates, shadow, I need to understand them first.
I'd rather finish this (this._dev_) first. 
...
Hey, Firefox was a shock.  So many js strong points, so many js flaws (I hate js)
AND proper etiquete.
No style, no frameworks, no good taste, nothing helps too much.  Errors can be everywhere. 
JS sucks.  It is hard, but YOU have to be more strict in how to do things, 
js does not help AT ALL.
...



190620

I hate js.
Big wash. 
=Before. All internal vars (over 30) were set as this._var exposed properties, i didn't like it.
=Later I set all var as module let...  so I no longer needed the "this._", 
but dev needs"type = module"   in his html, otherwise they all were global. I didn't like it.
more: the worst? BAD IDEA, I never meant to have multiple crudpads 
but actually you CAN have 2+ crudpads, in diferent tabs, it wouldn work. I broke it!!!! 
=Now.  kill'em all.  property again. Just one, a BIG one:    
      this._devStuff.category.item   
functions, flags, texts, buttonNames, messages,  
all what dev had set via methods, all of them inside _devStuff.  Still exposed, I still dont like it, 
but data has far better structure (from none) now.
larger text?  Not so. var names are shortened because of the known context.   
    this._devStuff.update.funEdit()
Still over 20 this._function() internal exposed methods, (no related to dev sets), I won't do anything here...
unless I apply delegation... 
I WISH it would lead to better code control, but JS don't care. 
You can do anything, js wont stop you from breaking everything. 
Freedom sucks.
I hate js.



190618

Why the gap... I dont remember
...
Re-learn is getting hard
Dont trust anyone.  Too much new stuff, too many wrong explanations.
freecodecamp:
Ok, more than ok if you DO the training projects there and you want to apply for a job, 
since there will be directives about HOW they want you to do things.
modules, promises, async, generators,  I got all wrong or missing.
So if you wanna do in the wild by your own, with minimun interaction (mostly google & stackoverflow, usually out of date)
you need far better infrastructure.  Badly.
javascript.info is getting better and better, in deep,  up to date and mainly accurate info,
both the how and the why.  
I look my current code here and I feel ashamed...  
But Chrome let me! 
My fault either way.
Need to fix, need an apocalliptic refactor... need a better understanding first.
Still hate JS. More than ever cause you can do it ALL WRONG and it still works.



190616

Dont trust GOOGLE DEVELOPERS.  They lie, they have reckless implementation, they got the loosy view of specs. 
They let WRONG things work.
instead
mozilla got it right.
firefox fire err when they should, then work as they can because thats the internet way.
I know much is js lang fault (I hate js), some are no yet implemented functionality,
but they dont do things worst.
developer.mozilla.org is better in every... thing.
I'll fix scope, modules importing, class, htm, 
.THEN I'll move on.  
Promise
...
WTF
wifi again
FY movistar
...
Sorry Movistar, I just learn  all the country went to darkness.  Not just the country, a couple of neighbor countriies too.
A few hours without XXI century conectivity in South America on sunday, I wonder if milenials survived the hunger. I would have recommended them
just go to sleep until  electricity comes back
Reminded me "Destruction" from Barjavel.
 


190614

No node yet.  Thanks to FogosaZorra i'll be here for a while.  
She has better checks.  But accepts fewer things, not sure if that is right or wrong.
...
So far (still 0 code) liking Typescript, lot of concepts I dont understand, just the TYPE thing sells me a lot.  I hate JS.
...
Need more JS, going to javascript.info to get them.  freecodecamp is not that good.
async, modules, big project struct, generators...
Vue & TS look good...  fit me.
But I need server side more.
quick firefox fix then server long journey.  later, 
fork node version, ts, generators
lot of refactor  I am SURE i will not do with plain js.  (I hate JS I think I already told that)



190612 after nap before Lunch

oops...
la zorrafogosa...
does not support "fields" (?) 
meaning properties with/wo  'this.'  inside class body ouside constructor.
Mmmm.  Is it ok?
VSCode does not complain, 
Chrome works with not even a warning.
I would applaud if it forces me to declare them... (but I still cannot use let/const)
but inside the constructor seems to ignore declaration, work with/wo "this." and wo "let", no issue.
Its all the same, but less.
Umpf.
I'll be around some longer...
...
How is it supposed to use let?  
inside constructor as properties with this. ?
outside class as global let ?
what about methods...



190612
Dear diary.
freecodecamp js training sucks. For me, a vanilla guy.
-js, after a dozen discouraginly boring if() challenges, 'let' and a couple of silly challenges, 
it jumps to challenge on method concatenation and map() with barely any explanation,
solved reading specs, discouraginly hard if you dont have the missing training.
-No word of ASYNC. COME ON!  What defines JS.  You get there only in the framework training. 
Frameworks oriented, too much framework stuff you dont need.  
Ah, they dont get the meaning of "user stories". They use it just for low level requirements, 
it is an important concept when you deal with customers.  
but
I guess it is PERFECT for getting a job.
The frameworks palette.
They use projects as learning tool, this is GREAT.  MY BAD: not to use them and jump to this my own learning project, 
so I remember almost nothing of their js & css advanced topics I learn with challenges success.
...
javascript.info !!!
I got best of js concepts there.  I should do its entire long training.  
I could help transalating to spanish, the best, learning and helping.
I just got GENERATORS there.
I can branch this prject to test...
Here I call an async function from Dev then I need to react (? wow I get it, React) when it finishes.
Tried a promise-like solution (from the other side), I failed.
I wrote _callRequest() to set what I expect and  behave after Dev answers resultOk(), similar to a CB. It worked.
I can use generators instead, yield, then next() with the resultOk() arriving, all inside the same function, 
safer than setting what I expect: better code. 
Dev wont see any difference, he needs to answer his async with resultOk() when he receives the CB.
Mmm... 
I can send the generator object to Dev's func then ask him the same obj inside the result(). 
Simple ask. Woudnt be hard. And my reaction to result() answer wont longer be an almost blindly guess,  
good bye unexpected result after timout or bored-abort button, no danger of bugs answering the wrong question.
Far better code.
But Dev's....    crudpad.resultOk(objWannaMyRawGeneratorObjBack, boolTrueFalseSuccesOrNot, textMessageToFinalUser)   
Mmmm...  
Added.  If I survive node training.
...



190611

Working version. Time to start log... 
Do I need it? Uhm... No.  I'll do if crudpads were used by me or others. 
To-do list & bug list, 
done & philosophical done (meaning cheat to-do drop) 
will do instead.
Time related, this diary. It makes me remember concepts better and take stronger design decitions. 
e.g.
Philosophilcal drop of focus behaviour was prematurely triggered.  
Will it be implemented? No. But the thing will move away from philosophical done. 
...
Woa, the lots of thing I left if I want crudpad to be a respectful element.
It cannot be. Is Nearly an app. Its rather a... reusable component?
I decided from start not to use events for dev in favor of function parameters,
far clearer for dev to set behaviour. 
I didnt use attr to set things either, too complex and the html would be too long and difficult to read,
it is clearly oriented to js.
The only attr I used is data prop in custom buttons, 
(stored in the dom but transparent to the user) but I could have used js vars instead,
maybe extend the button to have a modesActive prop. No need.  
Ok.
This writting helped:
I am ok with the decitions.
Even it doesnt make too much sense to be a custom element extend class,
the very first shot was to inject html inside a div as pure text and it seemed to work very well
and I am afraid...  Wouldn it be FASTER? To let chrome understand the text and create everything internally,
rather than so many object creation and addChild...
then manipulate everything from js is all the same.
I thought manipulate objects from desingn would be safer than text, but JS (I hate JS) does not help AT ALL.
...
Crudpad seems ok, but it is not an abstract project.  
It is part of the big, real life cloud app for cloud bussiness. 
...
Now.
Long goal and its path is clear, what to do RIGHT NOW after finishing debug list is not:
-Take js training again.  
  It would be far more productive now, there were too many new concepts then.
  (for a sqlserver2003+vb6 developer)   
-Rebuild the project
  to meet the custom components good taste & etiquete, using concepts related to that,
  like the shadow dom (I dont get it) and this thing that filters events fired I dont remember the name. 
-What about pwa. No. No yet. Focus, I'm a server side guy.  
-Replace the now working indexeddb with real cloud.   
  Do I have free cloud sql? Unlike indexeddb real cloud would be a rock seller.
-Just jump to node.
  then refactor this project to make a clear separation between client and server request.
  Building the crudpad and its abstracted requests inside the client IS SAFE, 
  but to code the db operation (like the test app here) client side IS NOT.
It took two months plus the (faulty) freecodecamp  trainig  to get here.
next  typescript (?) (I hate JS), Node , framework client (?), framework server (?), sql cloud,  
(Im ok with nosql, easier and maybe cheaper, but my apps fit sql better), unknown challenges, 
then THE app.
But I want money from this next week.
So stop crying.
...
Uh... Breakfast time already?  I should fix my insane circadian cycle. 
Having a bug-lag.
...
smooth debug , 
lot of improvement left.
no known js bugs, css need to improve to be in production. 
some ideas.  Scariest one:  Erradicate all class htmlelement extension, make it just a function.
I wanna jump to node.  Maybe more productive if I leave crudpad refining after learning server part.  
-commit-



190609 after wine 

Some refining, pretty well.
Some bug enumeration, easy to fix, but prefered to give time to be creative making the bug list :)
Now there is a refined to-do list.
the remaining 20% in 80% of the time rule? After TWO months????  No way.
Has to be presto.



190609

challenge: touch & drag the toolbar to a new position. left, up, right.  Not my current scope, but...
...
is there a -lint- extension for vscode? pretty sure there is. Surely CANNOT fix many things, 
but may help. Or give some advice.
WOA!!  its overwelming.  need to learn about scoring now?  Nah, just ask google.
...
readme looks ugly.  DO I HAVE TO LEARN GIT MARKDOWN TOO??
...
Delete button... doesnt delete...  testapp bug, ok.
HEA! bored button stoped working!!!
...
Mmm...
indexeddb too fast. 
How can I test async delay? Any atempt stops the js execution so waiting panel is a noshow.
Thx stackoverflow!  setTimeout(function, milliseconds); is async.
...
moved to-do list to zzBugStat.txt
...
It Worked!  
  ()=>{this._btTired()} 
parameter is (some) better than 
  {let tt = this; this.btTired.onclick = function(){ tt._btTired()} } // me cago en el yavascrít   
...
tooltip (title attr) for custom buttons
...



190608 after nap.  WORKING VERSION 

indexeddb with events
no control nor trycatch
working Anyway
...
css un/disabled should be more pronounced 
css hey() should flash when changes 
confirm should fire error OR let one of the two cb to be empty. Do nothing makes sense
didnt test button naming param, bet lot of spelling errs
...
custom buttons noshow.
customButtons.lenght not defined !!!!!!!! SPELLING AGAIN  hate js
this.customButton   not iterable  SPELL  FY!!!!
bot.dataset.estados    SPELL   FYFYFYFY!!!!!
Working now.  ALL JS FAULT.
Reckless css is getting ugly.
...
Only nav buttons debug left
need to implement cursor in test app
...
        LOL 
I got it wrong.   Create Read Update Delete 
Ok, I'll change names and test to fit it.
If I a dont the function names would be misleading.
Oh No!!!  JS fucking var freedom wont help!!!!!!!!!
anyway, has to be done.
...
In slowmotion, jumps too much.  Shouldnt.  
Maybe is just putting defaults at pad creation time,
and check if the there is a "disable then enable" line
...
But it IS working.
VERY few bugs.
check  to do 
then some shining
and ready to the next step.



190608

Replacing waiting panel is becaming a priority factor.
Its Ugly
Too agresive and anoying, even for a temporary thing.  It hurts me.
It would fireup the user bored factor and force him to hit the abort bored button.
I have to steal a nicer svg.  Not a gif please.  I want everything scalable,  
CEO wall screen desktop, minion 5'' pad like my phone. 
SAME app.  It's what I'm commited to sell. 
...
SQL. Is it a problem? 
Nosql are easier to maintain, easier to spread, easier to make them independent from... everything. 
The prehistoric Nosql is now the new thing, because most of the data today fits nosql better.
...
Cant find the bug indexeddb,  a big one.
Some things started working  when I went to specs, not examples. And after hack the browser. 
I dont want to learn it.
All cloud db seems paid.
1 year free? looks ok.  Maybe not starting now.  Nosql?   Mmm.  
I can do nosql.  But my data fits sql better.
And I have a clear ,very specific, goal.  
Mmm.
Even when indexedDb woudnt be useful even as a cache.  One Don google may delete whenever he wishes just because.
check: Sql, free, secured & well known (the service I wanna sell), 
the customer has to see a well working demo, he goes to home, uses the phone after dinner, he can edit his same data, same app.
data secured by something he can trust: MS, Google, Amazon(after little research) .
And the customer app server? Where do I put it? Strong user auth.  Login MS, integration to Office Cloud is nice.
Forget your lan issues and troubled servers  Even datacenters. 
Servers down, inet provider down, trasportation on strike, building on fire, who cares.  You have a phone?
Buy my service, secure your data so you dont need me, in MS cloud.
amazon + redhat, then azure?  
I already have redhat account... but I was too "raw" then.  "green" is the word? inmature? unbearded? need a context traslator.
I can do research after learning node.
Yet I am short on real world practice on js promises and js map 
indexedDB... puf.
Lets finish this.



190607

dark side outside
...
button naming. careful.
should give 2 options, text inside functions is handy, using textContent to avoid problems with simbols like nav << < > >> 
and other centralized, maybe json, to set innerHTML so can buld iconic buttons and replace more hidden texts like alerts
...
debugging tricky indexdb, going well. You need to hack your browser.
again, most bugs are from spelling.  Some from context, but the same source: shitty js.    
...
getting hard.
Need a bigger screen. Chrome has Too many debug panels, all needed. And needy.   
...
WTF
indexeddb store not found,  
and
object store with the specified name already exists.
same var
...



190606 again.  

Noisy. Bright. Day. 10:30.
Why did I wake up? Does it mean I was sleeping?
Well, who cares Im not getting paid for this.
Lets start with the out of place error message.
...
_setResultCaller() 
getting rid of fakepromise. good.
Coudnt resolve via promise nor cb
Guess I did it the better way possible, 
secured I hope with a caller list 
I cannot know now where the result comes from
but I know the result I can expect
What to do whit the needed and implemented bored abort button... 
just a message if result finally arrives
GREAT!  I changed 'unexpected promise' by 'unexpected result'
... 
Cant follow.
Something looks very wrong in the flow.
...
Just broke the panel
...
It's back. ok, start again
...
Im stuck.
cause I dont believe is not working.
Should I commit a failure.
...
going well
BIG mistake easy fix: set wait before sending request !!
more spelling, too busy didnt count, 1:4 at least.  Hate js.
... 
IDBDatabase': One of the specified object stores was not found.
stoped crudpad debug,
start test app debug
tired
commit
later
oops  Fatal unable to access github
phone dry 
plug...



190606

Note: The way I show and enable panels in js. Last successful test playing with css maxheight = 0. 
Some working but vulnerable code and one dirty solution. It does the trick.
The hidden panel keeps status, so I guess it has to be a better way.
My mind keeps telling me: It will be a common scenario, it has to be an easy abstraction, I have too much js code for this.
Or at least hide the code inside a lonely function, not spreading lines here and there.
Again, common scenario.  Show panel, hide the others.  Then Show another OR go Back to previous panel.
ok, I need this, just not now I'm telling back to my brain.
yeah, maybe there is a component over there, lets search for it only in not learning projects.
...
Note:  Maybe I should create all the buttons then show whats needed. Didnt want to create too many unuseful onclick events,
maybe is not that important. 
The thing: Unlike old apps, they can change while working.  
Example. I could let "Remove" button stay but disabled if working offline, then enable when online.
I can practice event delegation, may this particular case improve the code, 
one single function switch-case instead of the many _btXXXX() I have now,
PLUS the many crazy  {onclick this.  }  workaround (hate you JS)  would be unified.  An isolated crazy {this.} would be great.  
...
I have ZERO entusiasm put on fixing indexedDB.  What a fiasco. The doc is clear, chrome and firefox: 
persistent can be deleted just because.
I never wanted it to be a replacement for local express or mysql... 
(mmm... I lie, it crossed my mind as nosql option, I rejected just because I am devoted to traslate all my skills to the cloud) 
...but I tought it would be an excelent offline cache of the... 
customer work. 
In his home.
Then he reads news, checks facebook, plays online in other galaxy, then some porno, 
then download the last Deepin ISO (or w10 its last ThisTimeEverythingIsGoingToBeOk patch)... 
...and his browser will decide the indexeddb is not that important. Flush.
Some offline work lost.
Unlikely? maybe, It CAN happen. More users, It WILL happen.  Docs state: no warranty.  Not because an understable bug, just because.
If the users PC explode, ok, his fault, he worked too hard.  Browser bug? Ok, understable calamity.
But I cannot force the update, 
neither tell him you were too lazy and didnt update so I deleted your data.
...
I prefered to practice skills I will use in real work.  (before toying with frameworks)
But indexedDB is now maybe half implemented, and the easiest async db for testing. AND maybe is not half, but fully working
and I already have what I wanted, crudpad debug tool.
...
Taking too long.  How about node, cloudsql.  
Ok, the three.  
Plus maybe TS (TYPES!) and one or more frameworks and components that will EASE the job)
This IS the hard part.  No shortcuts, learn hard.  
Then the customer needs will be the easy job, as always been, after I built the infrastructure. 
...
Ok, stop crying, start debug.
...
What a difficult is to debug the async thing!  Sometimes lost in "where to now?".
Now it is doing nothing, but nothing is wrong.
MMmmppff... should I start node now?  debug in chrome is not enough.  Add another source of unkown issues?
I got here with zero debug, pretty good crazy achievement.  
Im tired, maybe I'll keep the old way.  Debug at home with the listing and the mind as the only tool.
Yeah, I miss 2200MVP.
...



190605 

190605 again but it's no dark anymore.  Nice sunny cold morning.
60years old and one month and counting.
I need to finish this before my first "ACV". 
Stroke as it's called in English.



190605

Lets go for the test app! 
...
UnknownError: The user denied permission to access the database.
When??? Ive never bn asked.
no google nor mozilla nor w3 spec solved this.
Again, stackoverflow pointed inconsistencies. 2015 article, outdated too.
Google info is outdated.  Tells "config" no working dprecated link
Lets see.
Browser keeps showing blocking info, "allow" doesnt allow.  
Cookies? What cookie? So I enabled "3rd partie" (DONT. EVER.)...  Its working now.  But... Cookies?
issue is related to local file system access, not cookies.
More info: Chrome and Firefox will DELETE your "persistent database" if they see they are too big. Or too old.
Ah, ok.
Crazy complex persistent transactioned and full featured local DB, deleted with no warning while you are reading the news.  
Why in the hell let me waste time in learning this, usable only to test AND if you hack your browser. And your customer browser. Mmm.
And hack the customer phone too?  What kind of demo would it be.
Kill indexeddb.  Later.
...
When I start learning Node... will it be the same?  
No please when I go cloud SQL and noSql...
Google, Im angry with your documentation system. It's not wrong, it lies.  
Azure, Amazon, you sell secure data. Are you all the same? 
Any free learning account? I NEED cloud db, no app of mine is usable without it.
I'll need demos to sell.
Trusty data if I can ask.
...
Bored abort button should show only after a timeout. Later.
...
Idb Not working.  But not related to idb but crudpad, so i'll keep it for now.
My Sui generis promise I bet.
...
Thanks, f.lux  I'll keep it in mind.  Let's...
...



190604

It went surprisingly well.
Most css problems fixed, enough for a truly debug.  Still need some work.  Later.  Vertical pad? maybe too, it's easier now.
All fieldset to div. Display to css hide transition
1000 lines and very few real bugs so far
(but spelling bugs hate you JS!!, forgotten this., the fake "hidden" _names., FYFYFY!!!!!)
...
Stole some svg code  ("Clouding..." wait), added a problem to solve: a pretty svg.
...
Added an abort waiting with a WORKING dirty solution I dont know how to do it right.  Some warning comments, it will do.
...
Now, indexeddb fix... (to continue the real debug he he )
Maybe fix the fake promise doing it right. Should I start learning how to?
Lets be...
Feeling going to dismay.  I'll get some sleep instead.



190603 after some sleep

Crazy spell bugs.  
...
The very outdated w3schools is still the greatest for html5 and css3 like flex.
...



190603

Learning css.  Again.  Not the bigger problem but the one with every move is a pain.
...
Found THE bug!!! In a forum.  Fieldset dsnt let flex row.  WHY???  It would make sense.
But I need flex, and I need disabled.  
A div inside the fieldset works ok... Mmm... too dirty.
Ok, I'll use div and replace disable with css alternative.
Done.
...
Crudpad is now 
    bottom, row, 100% width
It would be nice to let, say 
    left, column, 100% height  
with just a litul-crudpad class / attr 
...
Slower than expected, but this is learning no production. 
I dont want the things fixed, I want to know WHY.
I dont want good enough, I want them perfect, refactoring to death. 
Dont expext that in production altought  ;)   good enough is nice.



190601

Hard days.  Too personal to even put it here, this personal diary nobody reads.
...
Too many spelling bugs (hate js more and more). Before further debug:
Cleaner html gen.  
Cleaner confirm.
Cleaner element naming, classes. Maybe css atr conflict, good naming should help. 
I know a framework would help.  Thats the point, the big js lang failure, the freedom to step on the flowers.
Cleaner readme.  Just cause I love coding but I love writing the more. Frees my mind. 
...
Leaving it here, story to write in my blog no-blog but personal no-daily diary.  
...
to-do, unify 
 the serverwaiting stat from fake promise 
 with the confirm enablemenu() from .confirm
then debug.
CSS first.  Learn again.



190529

Pad refuses to stick.  
css. htm class.  Need to delegate more to css. 



190526

What a "locro" yesterday, what a meal, feeling full, feeling patriotic.
...
div dont have disabled. ok, fieldset will do the trick.
form + fieldset, design meaning. 
...
bugs 'cause css and js are disconnected. CANT declare trem in one place only 
Problem keeps.  css OR js.  
Design tells not to style inside js,
am I allowed to set visible / hidden / flex / none ? I need them.
MAYBE create a property 'div_active' and let css choose hid or disabl depending on media
...
focus.
Define elements, element classes, then continue.  
1
divMain = form.  When disabled (waiting server), what if user wants to abort.
If I let it, (or timeout, doesnt have it yet) what about the pending result, what if it finally comes.
My mind is boiling.  Can I put id on my sui generis promise? 
Did I UNDERSTAND promises anyway? Is my implementation any good? How should it be.  Didnt find.
Pretty sure a good promise implementation would NOT have parent uncertities issues.
Ha ha!  I coudnt focus, abort button defines where the form div ends
...
Besides, indexeddb not working.  Not now.



190524

Nothing is working.  Cant see.   
Wow! Status bar is working. Showing an error, but still.
CSS?
difficult to see correlations between dom css dom js...
Oh... Frameworks may help.  Dont care, there are not so many elements. 
Stop.
May CSS class names do the trick.  Clean start. 
...
Should I go deeper in css? I'm manipulating css properties inside js, may conflict with visual tuning. Not ok.
Mat delegate this in a couple of functions or 
work with classes only, no 'flex' 'hidden' etc 
Should I do it now?  
first debug, then refactor?
break and take css training?
Taking too long.



190523

Shoulder is killing me.  No artrosis, I'm lucky.  Is this the meaning of being
a 20 years old lad... the third time?  
Well... What was going on here...
I dont feel like doing element today.  I'll fill some gaps maybe.
...
No gaps? (nearly). 
 The htm part, only the new confirm div left,
 plus of course the surely lots of wrong var names fucking JS no help there.
The best thing to do is to register the element and START DEBUG at once, then I'll be plenty of work to do.
One thousnd never tested lines... 
A language I never used before...
with code strongly based on the async concept I never used before...
Ha! A genious or a foul.
The worst, no compiler to help to make code robust.
...
window.customElements.define ? Thats it?
what a surprise, not working.
Well, here we go.
...
line 417  '_promiseResult  not defined', forgot 'this.' 
a REAL language would point it before any test.  Hate js. 
looks good anyway. At least it recognites (sorry spelling...) js
...
32 spelling errors so far (JS LANG ERROR), 3 REAL bugs.    I HATE JS
missing this.  , wrong method refs,  wrong var name is JS FAULT !!!! Much more to discover.  
...
New CSS, some. Ugly show anyway, coudnt test any interaction.
IndexedDB fails to create.
Tired. Very.
...
I miss Wang 2200 MVP



19-05-20 at noon

Where the heck do I register element.
Why do I need it to be an element.  Not something I manage outside the class, maybe useless.
Dont need to register it.  Maybe.



19-05-20

Dear diary. Sad sunday.
Its monday already.
20? What did I do the last two days?
Now: wandering around, looking for something to complete... modify... or even spell check.
...
Need to endure status (mode) concept. 
Cant force type. 
Mode is 1 of 4.
WaitingFor is a suprastatus that put on hold any mode.   
...
Ugly html contruct.  Want better. Want to rewrite entirely. 
I dont want someone telling "See? x framework is easier."
htm template? Problem: Smartest is htm and basic prop same place.  Yes, I know frameworks do that.
...
Fuck!
set buttons names is cleaner from the collection  .buttonRemoveName = 'Remove? Oh No!' 
but inside the setRemove(,,, textButtonRemoveName)  is a nice touch.
json file is really better?
...
Buttons code is getting too verbosed.
I could use "registry" functions.    *******  chek  naming  **************  register, store, repo.
-PAdButtons  
-ServerRequest types. 
-Maybe custom buttons too.
So 
-one line to add            register(globalstorebutton, somebutton, onclickfunction )      register()
-Another to check / get     registered(globalstorebutton, somebutton) -> onclick   
Can name 
- setReg(globalstorebutton, buttonRemove, _funcDbRemove)
- getReg(globalstorebutton, buttonRemove)  -> function
- isReg(globalstorebutton, buttonRemove)  -> boolean
I can test a class instead of using globals
-  regPadButtons = new regStore
-  regPadButtons.Set(button, onclick)
FUCK again!
I am thinking RIGHT?  PadButtons collection should be the one having these methods!!! NO NEED of ANY OF THESE.
I'm on this.
...
More functions implemented.
...
Promises, callback.  HOW do I do my own?  Training always use callbacks from DOM.
I'll fake one until I figure it out.
UF!!! I hope it works... 
It was hard.
...
NEED to focus on element to VERY FIRST try!  It is crazy not to.  
1000+ lines not a single run could be a total vaporware.
Coming soon.



19-05-17

Lunch break.
Nothing to commit today... but still...
Just trying to understand git.    
Stage, commit, push, publish.  I dont get.  I can understand request, never used.
Project folder in dropbox... in the "editable" folder, autozip cumulative. Just in case
Fatal: git taskcanceled exeption
    I didnt do it
Fatal: unable to access 443 time outside
    wifi is good.
    ok I dont care.
aaahhh...  I should use 'vanilla' like js in the learning process.  
  Inside VS CODE many things may be hidden for my confort 
  Later. If I need it.



19-05-16

Cleaner: 
-I can put button names in a json file.  Later.  I'll just stop enhancing code related to that
-The class button_crud lets dev modify that and more, add icons, svg; note: dont overwrite this. 
...
to toy with, later
- If I understand event delegation...
1) db file:
May I replace ALL .onsuccess in db section with just ONE line ??  
the panel lets that, no need to code anything extra
 onsuccess  (){ crudpad.result(true) }   
 onerror   (){  crudpad.result (false, msg2user) }   mm... the msg to the user...   
 careful, can fire when I dont want to. 
 Just a few db functions, no need. 
2) crud file
Replace all insane 'this.' onclick listening  whit one ?  There is an advantage:
  waitingfor status in only one place.
...
What if I put an html file (is this a template?) instead of making it from js? Is it
cleaner?
preferred?
I dunno
...
Hate js again
EnumMODE = { 'IDLE':1, 'SHOW':2, 'CREATE':4, 'MODIFY':8, }
this._mode = this.EnumMODE.MODIFY    
would be useful if js let me 
  var  mode  as  EnuMODE     ( Even VB6 had it!  Does TS? )
No way to protect anything. 
js is wonderful tool to fabric bugs.
freedom sucks.
...
internal status waitingFor,  so dev sees only one method for everything result() 
each button registers to _buttons, their onclick can be simpler than now,
plus the unified onclick let me manage waitingFor all in one place, fewer errors.  
...
I dont get html element class extend yet, link still broken.  
Busy tomorrow, hope i ll back with certezas  
no net? no need to commit now, I just hope notebook dont explode. 



19-05-15

REAL DATABASE!
Finished -without ANY testing- htm playground with test database indexedDb.  So I can test the panel.
No need to promises. Just events.
With the crudpad in mind, it was too easy.  I wonder if any of these would work. 
...
Didnt implement db NAV yet (cursors). Easy too, with my sql backgound.  I'll  back to it later in the project,
too much code with no idea of how good I'm going.  
...
DB, PAD.  They'll test each other.  Sometime.



19-05-13

BirthWeek  break.  I just left being a teenager, 3th time.  I'm 3 times 20yo young. 
The break will continue while studing promises, I understand them but they are not in my blood yet.



19-05-09

I really was trying to implement firebase, useful knowledge unlike local storage. 
Then node? now?  Everything new here.  Learning from caos, not my first time, like a baby. 
but.
Insane js language, great callbacks, promises, node, firebase, nosql, dom, they all first time.
and no way to test any until everything is setup and in armony.  
Stop overwelm.
Indexeddb is complex, maybe too complex. But it has what I need, solid test for my first app.
Stll, either way, I have to finish it without even one test...  Until I get some crudpad done.
but If I do things right design errors in one project wont make the other deprecated.  
...
result(true/false)  is ok. but I keep thinking what if.  
onerror, onsuccess sound more familiar to dev,
would it put the complexity on the wrong side?  ?
But the message would target to exactly where it was called, thats the beauty of promises
If I understand.
Maybe I can think aubout it later, buy it feels like one of the starting paradigms.
YES.  Depends on how difficult is for dev to fire them.  result() is easier. 
F freecodecamp only barely teach async inside frameworks part.  I WON'T DO iT.  Vanilla is my goal, 
vanilla will be my schooling.  By the time I "finish" learning all frameworks will be deprecated. lol!
hopefully js deprecated too. It needs to be rebuilt.



19-05-07

Fatal github empty server response?  Okey.
Uf. Need to do test db app. Real, no fake.  Promises, promises, promises...



19-05-06

Keeping playground local. "confirm" was a good practice. 
But still the code here is completely untested. (may I say: Cool! or Doomed!)
Taking longer than I expected.  But it WILL be a burst. I ll finish this soon. 
...
Still Hate JS
...
JS naming nightmare.  No way to ensure integrity, 
intellisense is pretty dumb,  It CAN'T BE GOOD with this language!!! 
I cant do arrays of objects, anonymous or fancy abstractions, not here,
the pad is pretty complex and distictive elements, I need NAMES.  Lots of.  
No integrity check, and they became properties?  FY!!!
But I can do better.  No exposed names for button properties, 
just expose the buttons themselves to Dev and let him change everything from text to tips, icons and animations;
but Do I need the expose? or just naming it right is then well showed? Maybe. Maybe crudpad.buttons is clearer,
just like crudpad.customButtons. Ill keep separated cause of different implementations.
...
Still hate js, but the async thing is the coolest. You are the boss, 
you dont wait until your minions finish their job.  You just tell them what to do 
and go do something else.  Its REAL multitask, cause you are not doing it.
The first word in every js tutorial should be: ASYNC
Wow, forgot to stage commit push publish or wathever.



19-05-03

Callbacks here?  YES! ...maybe. If I understand, 
needed on element onload to ensure I enable controls when they are ready,
where should I put them? Can I put only one for the entire div?  DOM!!!!
Library, here I go again.



19-05-02

Im back.  No dispatch. No callbacks either.  No place to practice them here, if there is a SIMPLEr way. Ha!! KISS.
Should do practice II: litul-form to bind litul-crud.  No way, Im not going to make a framework for myself.  
Just schooling myself.   I NEED to practice server related code!!!
Internal names madness...
Doing everything with absolutely no test.  I am crazy?  Too confident? What a debug awaits.
The log is longer than my code!  Log is dreams and hopes.  And encouraging too.  Dear diary...



19-04-27

onclick events from crud buttons.  They all async.  But the callback has to be managed by dev. So:
- addEventListener and a series of event types for dev to dispatch?  is worth the effort ?
or 
- crudPad.result(true/false) function as I origininally tought dev has to call after he receives the callback
Looks the same job for dev.  dispatch(somethingok)  or result(ok), he controls the timing anyway.




19-04-26

F kidding me.  No local var inside classes???  this._MADNESS.
DOM goes crazy.  With no f way for js to check integrity, 
It would be better if I text instead of doing fancy objects
    like this: innerHTML = "<div id='divcrud' ><button id 'btnew' class 'dadada'  etc
Hate js. Again.
Anyway, more code: 
DOM, set methods for dev, modes, enabling div & buttons.  Next: hidden handlers  then test app



19-04-25

readonly and private properties   _    # ll be standard when I start the real code... 
"pad" instead of menu, buttonpanel or whatever 
"setCreate()" instead of implementCreate() 



19-04-24

some backbone code wo testing. 
need to finish fakecrud test first
going crazy, where code goes? construct, class, outside, _fun get set , vars ,  CONTEXT!!! where????
where to store main vars from implements()? outside class? 
wtf this and onclick  ????  ruined all clean code atempt.  Wont put tst code here.
just realized I need a firing method cause you cant define everything on start. First implements.() then fire.
Crazy slow... Time to switch to 2 my new Mint partition? I dont like Mint very much and I feel lazy to try other
but 700MB "antimalware service" 20%cpu "system interupsts" too much
stop it!
Another rock in the way, back to javascript.info



19-04-22

I just realized I hate JS. It's not me, it is something else. 
How can I protect the code from idiots like me?
Too much debug.  
I now understand the frameworks and tools, they are proliferating because of bad languajes.
stiling to easy test, debug and control. why? Because the languaje failure.
Too much debug.  Long ago, a project lider told me "your code doesnt have bugs!" No, never.
I have to focus on customer needs, not code. 
Of course I have mistakes, but when the code COMPILES OK, I KNOW there are no more bugs. 
The first in the project, the old notebook made of paper.  Data, process, relations, the BIG picture. 
Then code: Declaration, types, well designed custom types, enums, context, NEVER parameters inside " ".
Add new properties to system objects and types, really? 
No warning, just does. "Oh. I tought you put .leg on purpose!"
Freedom? You can walk the big garden straight without following any path and you MAY reach your goal earlier.
dont be surprised for the time you spend later cleaning the mud and broken flowers from yours shoes and pants.  

I have to finish this, it's the process.  
It is still important. Like the horrible NTSC before cable (against PAL/SECAM), the standard to buy... in USA.
Then Node.
Then no framework, languaje first.  Maybe TS.  



19-04-20

Needing more background here... Still fighting async.
To do, rewrite fake crud app, localStorage with fake async response is crazy, indexedDB 
is a real async app and test... 
Should I test real latency problems? Looking for free cloud DB storages now.

Panel thinking:   
add custom confirm and custom msg inside panel, no popups. 
Status via backgound colors would be nice.
Dev op callback 
  .result( ok_true, "msg tudu bem") 
  .result( kaput_false, "kaput your db just crashed" ) 



19-04-17

Break is over.  My sinusitis isn't.  Wanna drill a hole in my head to release... something, anything. Ibuprofeno wont be any help, unless stomach ache become more painful than eyes pain.

Cant help with callback... What if I do a "litul-Form element"?  It should understand "edit mode", "idle mode",
and an special "disabled mode" that wont enable until it receives the msg "paint this THEN enable yourself"
Should I study frameworks with "html templates"?

WTF class get, set...  let  x.status = x.list.nnn ????
to study... again.

Custom buttons will be there. Useful for to localstarage, to pdf, to Xls, etc  



19-04-13

html and js app for the crud panel test. 
Harder than I thought, how to test one each other wo finishing them first  

humpf.  Timeout call!!!  
Need to get cb & dom events better.  freecodecamp sucks here. 
You dont want the user clicking "modify" before the input elements are filled!
javascript.info , I'm going.  



19-04-12

Still thinking phase.
Methods:
1 method to add custom buttons. (without it the panel would be too restrictive )
  onclick is all yours, dev.
  One extra property:  The status (IDLE, SHOWING, EDITING) on wich these buttons would be enabled   

6 methods to define the panel:  paint empty, create, update, remove, search&show, nav.

1 method to tell the panel the result of any op so it can change its status.  
  The result follows the CB that dev should put in its funtions.  
    Still raw.
     To define: 
     Is it ok to receive just true/false for operation sucessful? 
     OR  
     Do I need to check an unexpected result?
          RESULT_MSG = { CREATE_OK, CREATE_FAIL, UPDATE_OK, ...  DRAW_OK, ... etc... }

1 method, optional, to overwrite all buttons names at once (or icons, or svg) 'ok' 'cancel' 'yes' 'no' 'new'...
  Other L&F should be via css I suppose.

more:

set properties for buttons? Maybe not, three options is too much. 
Better Use the method, These four at the beggining.  
  .txtButtonOKname = 'Ok'             // ok / cancel, 
  .txtButtonCancelName = 'Cancel'
  .txtButtonConfirmYesName = 'Yes'   // I hate browser confirm()
  .txtButtonConfirmNoName = 'No'

-When the user is modifying and cancels , status go IDLE and form emptied.  
    Maybe I should give dev option to redraw showing record... not posible if I only have .opResult(false)   

Still Dont like names.        Edit: I DONT CARE! They are just parameter names.
  funXXX_DbXXX()  funcXXX_FormXXX()
  funcXXX_ related to the corresp implementXXX(), 
  then _Dbxxx or FormXXX, form or sql specific op.  Mmm...

Close to the REAL start



19-04-10
to define:

-via events to listen, like an oop interface? (My original VB6 menuABM interface) -I Still dont know how to-  
-via functions as properties?  sounds dirty but js devs are very familiar with them
  like this     crudPanel.funcFormEditNew =  ()->{//displays html for edition }
                crudPanel.funcSqlInsert   =  ()->{//sql insert code}
-via functions as parameters? cleaner
  like this    crudPanel.implementCreate(funcFormEditNew, funcSQLinsert)
-error and feedback management HOW TO!!!!????
  Still thinking how to feedback. How to manage callbacks...  yet KISS. WHERE TF put them?

Maybe:
create custom buttons (onclick will be all yours) able to respond to the panel status  
(i.e.  "Export to xx", only enabled when "showing" status; "Paste from" only in "editing" status )  



19-04-09
linea hecha en casa con  VS CoDE 
  a ver como joraca se manda
  que corno significa stage 
  
  



  // from here and down
  // early stages, no even time existed.  
  // Pre big bang area. 
  // I took it off from the readme, but I couldnt erase it from being cause the archeological value.
  // No chronological, it was continuosly edited and overwriten, some archeo is lost.
  

Still thinking process. CB makes me nervous.

Still thinking how to feedback ops. How to manage callback...  yet KISS.

Status WAITINGSERVER, a 5ft status or a special status? To define.

What about ERRORS. Mmm....

So far, only 5 optional methods to be implemented by dev.  Looks good.
Up to 11 optional functions to implement, CLEAN nearly pure functions.  


What about msgs. 
  a better confirm() inside panel. 
  Msgs confirmation goes inside implementXxx ?  
  implementRemove(,,,
    txtMsgConfirmDelete = 'Confirm deletion?'  ,
  ) 

What about button names, should I put inside implementXxx() too?  
  implementCreate(,,,,
    txtButtonNew = 'New',
  )     
  and maybe
  .implementGeneralSettings(   // The only one Mandatory?
    funcEraseForm,      // Mandatory. code for closing/cleaning show/edit form. Avoids dirty views.
                        // called first showup and whenever status goes to idle- 
    txtButtonOk,
    txtButtonCancel, 
    etc...
  )
  or just leave them as properties  .msgConfirmExit, .txtButtonOk, ...


Azure devops, github... How do they keep version history? To check. Forks only? Too crazy.


***What dev should see and fill***
===

// RAW.  Not even alpha.  It's still a thinking thing, hi-hi.   

// It'll need a way to do an EMPY view: when first shows, when the user cancels edition, when a painting fails. 
// so this method is mandatory:
.implementFormControl( // Neither CRUD nor NAV, but the only one mandatory.

    funcEraseForm,  // code for closing/cleaning any show/edit frm. To show emptyness. This avoids dirty views.
                    // It's called first showup and whenever status goes to idle- 
    funcBlockForm,  // code to block further editions, either disabling all inputs or disabling the entire form
                    // WITHOUT erasing the data in the input elements.               
)

// These 5 methods implement bahaviour and they all are optional.
.implementCreate(
  funcCreateFormEditNew,  // local code htm form for edition, can control inputs, NO DB ops just edit
  funcCreateDbInsert,     // code that reads the form, check, and do the sql insert
  txtButtonName,           // optional, default = "New"
)

.implementUpdate(
  funcUpdateFormEditModify,
  funcUpdateDbUpdate,
  txtButtonName,         // optional, default = "Modify"
)

.implementRemove(
  funcRemoveDbDelete,     // Code for sql delete showing record.
  txtButtonName,           // Optional, default = "Delete"
)

.implementSearch(
  funcSearchAndShow,    //code that opens a search form  then displays data  
  bolInputBox,          // optional, if true puts an input box next to the search button,
                        // its content is passed as param to funcSearchAndShow(inputElement.innerText) 
                        // so dev can directly search for what's written there.
  txtButtonName,         // optional, default = "Search"  
)

.implementNav(
  funcNavMoveFirst,   
  funcNavMovePrev,
  funcNavMoveNext,
  funcNavMoveLast,  // optional, all of them. 
                    // Code for  << < > >>.  
                    // Can be single records step 1 or grid step many, 
                    // case grid, there MUST be always ONE and ONLY ONE selected for the panel to work well.
  arrayButtonNames, // Optional, default = [ '<<' , '<' , '>' , '>>' ]
)

.operationResult(msg)  // To inform the panel so it can change its status. It should be an answer for a CB.
    //  msg = i dont know yet.  true/false, or an ENUM.  
    //  I think It'll be obvious only with the project more advanced. I'll start with bool. 


.setAllButtonsInnerHTML (txtButtonOk, txtButtonCancel, ... )  // I think it's clean to have the option .
    // so dev can put icon and SVGs in one place.  Do I need to be careful InnerHTML dsnt overwrite too much? 


 
  Note: I quit being an all-semicolon paranoic to be an only-to-force-starting-commands advocant 
  like  for( ;i++)   
  like  ;[] 
  like  ;(test)?doThis():doThat()  
  No debate intended, I just guess fewer errors with this aproach.  Plus a cleaner screen.
 
